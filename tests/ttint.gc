load lang_adms.so
spice
* simplistic integrating ager

.param vdd 1.7
.options numdgt=5

.adms
`include "gnucap-adms.h"
`include "discipline.h"

module ttint(e);
	inout e;
	degradational e;
	parameter real m=1;
endmodule

module ager(p,n);
	inout p,n;
	electrical p,n;
	degradational nage;

	// Model parameters
	parameter real r0=10000 from (0:inf)
	               (*info="Fresh resistance [Ohm]"*);

   real v1, i1, g;
	real a (*ask="yes"*);
	real b (*ask="yes"*);

	// ttint #(.dummy(1)) int1(nage);

// built in abs currently broken
	analog function real myabs;
		input x;
		// real a; bug, will not be declared (?)
		begin
			if(x>0)
				myabs = x;
			else
				myabs = -x;
		end
	endfunction

// BUG, cannot skip parameterlist with adms
// BUG, verilog-A does not permit empty parameter list
// using m as a dummy parameter.
	ttint #(.m(1)) int1(nage);

	analog begin
		@(initial_model) begin
			g=1/r0;
		end
		@(initial_instance) begin
			a=0;
		end
		@(initial_step) begin
			b = State(nage);
		end

		begin
			a = State(nage);
			v1 = V(p,n);
			i1 = v1*g/(1+a);
			I(p,n) <+ i1;
			Level(nage) <+ myabs(v1)*1e-2;
		end
	end
endmodule
endadms

load d_ttint.so

paramset myager ager
	.r0=.1;
endparamset
spice

.echo testdata

.verilog
myager a1 (nout,nin);
spice
V1 nin 0 pulse iv=0 pv=1 rise=.2 fall=.2 delay=.1 width=.1
R1 nout 0 1

.print tran
+ v(nodes)
+ tr(a1.int1)
+ tt(a1.int1)
+ a(a1)

.print tt v(nodes)
+ a(a1)
+ tr(a1.nage)
+ tt(a1.nage)
+ tr(a1.int1)
+ tt(a1.int1)

.print dc v(nodes) a(a1)
.store tw a(a1) b(a1) tr(a1.nage)

.ttr 0 1000 .1 .6 * 2 new > ttint_tt.out echo tran > ttint_tr.out
.measure a at(probe="a(a1)" x=34)
.measure b at(probe="b(a1)" x=34)
.echo >> ttint_tt.out
.ttr 0 1000 .1 .6 * 1.2 new >> ttint_tt.out echo tran > ttint_tr.out

.status notime
.end
