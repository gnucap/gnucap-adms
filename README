gnucap-adms package
Copyright: 2012-13 Felix Salfelder <felix@salfelder.org>
License: GPL3+

This package helps compiling verilog-a models to gnucap devices.

synopsis:
    gnucap-adms.mk [target]

    generates c++ code distributed over file.cc file.h file_top.hxx ...
    containing a gnucap device

gnucap session example, FTR:

current status is, with gnucap/master + gnucap-make + gnucap-adms, you can do

$ gnucap -a lang_adms.so -a d_adms_vbr.so -a d_adms_i.so -a c_make_attach.so
[..]
gnucap> load_va somemodel.va
[ translates, compiles/caches and loads... ]
gnucap> (use the models)
gnucap> end

here "use the models" means that you can use the components from the .va files
in your netlists.

expect this to work for *some* models only, but you get the idea.

installation prerequisites:
 - current adms [1]
 - gnucap (or gnucap-uf)

[1] git://github.com/QUCS/adms

configuration:
 --enable-local (experimental) install plugins to $HOME/.gnucap/lib,
                in case you have no write access to gnucap_libdir
                you then will have to invoke gnucap like
                LD_LIBRARY_PATH=$HOME/.gnucap/lib
                in order to load the plugins
                (untested in newer versions)
 --program-suffix
                set program suffix. should be the same as used for gnucap.

features:
 - (controlled) sources for potential and flow
 - disciplines from discipline.h (partially working)
 - subdevices (incomplete, but works)
 - see tests and examples
 - under active development

missing:
 - reference args in analogfunctions
 - events
 - everything that adms cannot do

bugs:
 see BUGS

remarks:
 - indentation in gnucap.xml (two spaces) has been taken over from "adms-mot",
   the generated code should be approximately BSD KNF style.
 - there are no optimizations yet. hence bigger components will be slow.
   everything is prepared to move forward to modelgen style evaluation...
 - approach essentially obsolete; however some parts will seamlessly
   transition to any future project

==== note on split.py ====
The script gnucap.xml will be modified, before can be used by admsXml:

split.py: split gnucap.xml in many files, for each scope in gnucap.xml respectively
Reason: many script-files allow you to implement something like derivation, for example:
	admsXml -e sript1.xml -e script2.xml -e script3.xml

	script1:
		template a calls b
		template b
	script2:
		calls a (-> calls script1::b)
	script3:
		template b
		calls a (-> calls script3::b)

If you try to impement this example with scopes, the script2-"a"-call will use script3::b (looks like a bug).
