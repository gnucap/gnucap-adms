#!/bin/bash
# this file is part of gnucap-adms
# Copyright 2012 Felix Salfelder
# License GPLv3+

usage="type $0 some.va to generate some.cc and some.h. \n
\n
to get a shared object type \n
make some.o CXXFLAGS=\"--shared\ -fPIC\" CPPFLAGS=$(gnucap-conf --cppflags)\ LDFLAGS=\ \n
mv some.o some.so"

function check_gnucap {
	[ -z `which gnucap-conf` ] &&  echo "need gnucap-conf" && exit 1 
}

function check_adms {
	[ -z `which admsXml` ] &&  echo "need admsXml" && exit 1 
}

check_gnucap

prefix=@prefix@
compile=no
prep=no
quiet=no
verbose=no
gnucap_libdir=@gnucap_libdir@
ES=$(echo "-e@datarootdir@/gnucap-adms/gnucap_"{0,1,2}.xml)
RPATH=-Wl,-rpath,@libdir@
trace=
translate=yes
opt=0
ndebug=
gdb=
cppflags="-I@includedir@/@PACKAGE@ $CPPFLAGS"
ldflags="-L@libdir@ -Wl,-rpath,@libdir@ -le_adms"
CXXFLAGS="-Wall -pedantic"

for arg in $*; do
	case $arg in
		*.va)
			check_adms
			cmd="admsXml @ADMSXML_FLAGS@ -I@includedir@/@PACKAGE@ $ES $arg -o ${arg%.va}"
			[ $verbose = no ] || echo $cmd
			if [ $translate = yes ]; then
				$cmd
			fi

			if [ $compile = yes ]; then
				cmd="@CXX@ $ndebug $trace $gdb -O$opt $cppflags $(gnucap-conf --cppflags) -shared -fPIC \
				    ${arg%.va}.cc -L@libdir@ -le_adms -o ${arg%.va}.so $RPATH"
				[ $quiet = no ] && echo compiling ${arg%.va}.so
				[ $verbose = no ] || echo $cmd
				$cmd
			fi

			if [ $prep = yes ]; then
				cmd="@CPP@ $ndebug $trace $cppflags $(gnucap-conf --cppflags) \
				    ${arg%.va}.cc -L@libdir@ -le_adms -o ${arg%.va}.ii $RPATH"
				[ $quiet = no ] && echo writing ${arg%.va}.ii
				[ $verbose = no ] || echo $cmd
				$cmd
			fi
			;;
		*.cc)
			cmd="@CXX@ $CXXFLAGS $ndebug $trace $gdb -O$opt $cppflags $(gnucap-conf --cppflags) -shared -fPIC \
				$arg -L@libdir@ -le_adms -o ${arg%.cc}.so $RPATH"
			[ $quiet = no ] && echo compiling ${arg%.cc}.so
			[ $verbose = no ] || echo $cmd
			$cmd
			;;
		--prep|-i)
			prep=yes
			;;
		--compile|-c)
			if [ $compile = yes ]; then
				translate=no
			fi
			compile=yes
			;;
		--verbose|-v)
			verbose=yes
			;;
		--trace|-t)
			trace=-DDO_TRACE
			;;
		--gdb|-g)
			gdb=-g
			;;
		--opt|-o)
			ndebug=-DNDEBUG
			opt=$(expr $opt + 1)
			;;
		--quiet|-q)
			quiet=yes
			;;
		--debug|-d)
			export adms_dbg_xml=yes
			;;
		--ldflags)
			echo $ldflags
			exit 0
			;;
		--cppflags)
			echo $cppflags
			exit 0
			;;
		--help|*)
			echo -e $usage
			exit 0
			;;
	esac
done

